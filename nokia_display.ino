/*ESP32 Connections:
  PMS5003:   TX -> P4   RX -> P16
  BME280:    SCL -> P22   SDI  -> P21
  Display:    RST -> P2   CE -> P15   DC -> P5  DIN ->  P23  CLK -> P18      
*/

#include <SPI.h>
#include <Adafruit_GFX.h>
#include <Adafruit_PCD8544.h>
#include "PMS.h"
#include "Wire.h"
#include <Adafruit_Sensor.h>
#include <Adafruit_BME280.h>
#include<esp_task_wdt.h>

Adafruit_PCD8544 display = Adafruit_PCD8544(18,23,5,15,2);
Adafruit_BME280 bme; // I2C
PMS pms(Serial2);
PMS::DATA data;
uint32_t cnt = 1;

esp_task_wdt_config_t  wd_config;
uint32_t display_time = 0;


void setup() {
  //enable watchdog
  wd_config.timeout_ms = 300000;
  esp_task_wdt_init(&wd_config);//enable panic so AirMonitor restarts
  esp_task_wdt_add(NULL);

  Serial.begin(115200);
  Serial2.begin(9600);
  pms.passiveMode();
  pms.wakeUp();

  //Nokia5110 display settings
  display.begin();
  display.setContrast(60);
  display.clearDisplay();
  display.display();

  // bme280
  bool status = bme.begin(0x76);  
  while (!status) {
    status = bme.begin(0x76);
    static int cntr=0;
    Serial.println("Could not find a valid BME280 sensor, check wiring!");
    if(cntr++>=10) break;
    delay(1);
  }
}
float averages[10];
void loop() {
  esp_task_wdt_reset();
  Serial.println('.');
  pms.requestRead();
  if (pms.readUntil(data)) {
    averages[0] += data.PM_AE_UG_1_0;
    averages[1] += data.PM_AE_UG_2_5;
    averages[2] += data.PM_AE_UG_10_0;
  }else{
    Serial.println("PMS no data");
  }
  averages[3] += bme.readTemperature();
  averages[4] += bme.readHumidity();
  averages[5] += (bme.readPressure() / 100.0F);
  
  if (cnt++ % 10 == 0) { //print 10sec average values
    for(int i=0;i<10; i++) averages[i] = (float)averages[i]/10;
    averages[3]-=5; // approximate conpensation for bme280 sensor temperature readings

    Serial.print("PM 1.0 (ug/m3): ");
    Serial.println(averages[0]);

    Serial.print("PM 2.5 (ug/m3): ");
    Serial.println(averages[1]);

    Serial.print("PM 10.0 (ug/m3): ");
    Serial.println(averages[2]);

    Serial.print("Temperature = ");
    Serial.print(averages[3]);
    Serial.println(" *C");

    Serial.print("Humidity = ");
    Serial.print(averages[4]);
    Serial.println(" %");

    Serial.print("Pressure = ");
    Serial.print(averages[5]);
    Serial.println(" hPa");

    memset(averages,0,sizeof(averages));
  }

  if(display_time++ % 60 > 0){ //break displaying measurements
    display.clearDisplay();
    display.drawBitmap(0, 0, epd_bitmap_Untitled, 84, 42, 1);
    display.display();
    delay(3000);
  }else{  //display measurements
    
    // display.clearDisplay();
    // display.setTextSize(3);
    // display.setCursor(0,5);
    // display.write(14);
    // display.display();
    // delay(1000);

  }

    

  delay(1000);
}



const unsigned char epd_bitmap_Untitled [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x63, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
	0x60, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x60, 0x00, 0xc7, 0x84, 0x23, 
	0x0f, 0xc7, 0x83, 0xc0, 0x01, 0xc0, 0x60, 0x00, 0x4c, 0xc6, 0x23, 0x08, 0xcc, 0xc6, 0x60, 0x07, 
	0x00, 0x60, 0x3f, 0xc0, 0x66, 0x22, 0x08, 0xc0, 0x60, 0x30, 0x1c, 0x07, 0xc0, 0x3f, 0xc0, 0x63, 
	0x26, 0x08, 0xc0, 0x20, 0x30, 0x70, 0x07, 0xc0, 0x00, 0x4f, 0xe1, 0xfc, 0x18, 0xc7, 0xe7, 0xf0, 
	0x38, 0x00, 0x60, 0x00, 0xc0, 0x23, 0x26, 0x18, 0xc0, 0x20, 0x30, 0x0e, 0x00, 0x30, 0x00, 0xc0, 
	0x66, 0x22, 0x10, 0xc0, 0x60, 0x30, 0x03, 0x80, 0x30, 0x61, 0x88, 0x44, 0x23, 0x30, 0xc8, 0x64, 
	0x60, 0x00, 0xc8, 0x60, 0x3f, 0x0f, 0xcc, 0x21, 0x7f, 0xef, 0xc7, 0xc0, 0x00, 0x0f, 0xc0, 0x00, 
	0x00, 0x00, 0x00, 0x40, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x20, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00
};


